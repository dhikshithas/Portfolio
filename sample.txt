npm init -y
npm install express mongoose bcryptjs jsonwebtoken dotenv body-parser
npm install --save-dev nodemon
node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"

node app.js

blog-platform/
├── models/
│   ├── user.js
│   ├── blog.js
├── routes/
│   ├── auth.js
│   ├── blog.js
├── .env
├── app.js
└── package.json

PORT=5000
MONGO_URI=mongodb://localhost:27017/blog-platform
JWT_SECRET=mysecretkey

user.js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema(
  {
    username: { type: String, required: true, unique: true },
    email:    { type: String, required: true, unique: true },
    password: { type: String, required: true },
  },
  { timestamps: true }
);

// Hash the password before saving
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();
  try {
    const salt    = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
  } catch (err) {
    next(err);
  }
});

module.exports = mongoose.model('User', userSchema);

--------

const mongoose = require('mongoose');

const blogSchema = new mongoose.Schema(
  {
    title:   { type: String, required: true },
    content: { type: String, required: true },
    author:  { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  },
  { timestamps: true }
);

module.exports = mongoose.model('Blog', blogSchema);
-----------------

const express = require('express');
const User    = require('../models/user');
const bcrypt  = require('bcryptjs');
const jwt     = require('jsonwebtoken');
const router  = express.Router();

// Register a new user
router.post('/register', async (req, res) => {
  const { username, email, password } = req.body;
  try {
    // Check if user already exists
    let user = await User.findOne({ email });
    if (user) return res.status(400).json({ error: 'User already exists' });

    user = new User({ username, email, password });
    await user.save();
    res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    console.error(error.message);
    res.status(500).json({ error: 'Server error' });
  }
});

// Login and get a token
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    // Check if user exists
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ error: 'Invalid credentials' });

    // Validate password
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });

    // Generate JWT token
    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
      expiresIn: '1h',
    });
    res.status(200).json({ token });
  } catch (error) {
    console.error(error.message);
    res.status(500).json({ error: 'Server error' });
  }
});

module.exports = router;

-----------
const express = require('express');
const Blog    = require('../models/blog');
const jwt     = require('jsonwebtoken');
const router  = express.Router();

// Middleware to authenticate JWT token
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token      = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN
  if (!token) return res.status(401).json({ error: 'Access denied, token missing!' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user      = decoded;
    next();
  } catch (err) {
    res.status(400).json({ error: 'Invalid token' });
  }
}

// Create a new blog post
router.post('/create', authenticateToken, async (req, res) => {
  const { title, content } = req.body;
  try {
    const blog = new Blog({
      title,
      content,
      author: req.user.userId,
    });
    await blog.save();
    res.status(201).json({ message: 'Blog post created', blog });
  } catch (error) {
    console.error(error.message);
    res.status(500).json({ error: 'Server error' });
  }
});

// Get all blog posts
router.get('/', async (req, res) => {
  try {
    const blogs = await Blog.find().populate('author', 'username');
    res.status(200).json(blogs);
  } catch (error) {
    console.error(error.message);
    res.status(500).json({ error: 'Server error' });
  }
});

module.exports = router;

----------------------------
const express    = require('express');
const mongoose   = require('mongoose');
const dotenv     = require('dotenv');
const bodyParser = require('body-parser');
const authRoutes = require('./routes/auth');
const blogRoutes = require('./routes/blog');

dotenv.config();

const app = express();

// Middleware
app.use(bodyParser.json());

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/blog', blogRoutes);

// Connect to MongoDB
mongoose
  .connect(process.env.MONGO_URI, {
    useNewUrlParser:    true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((err) => {
    console.error('Error connecting to MongoDB', err);
  });

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});



"scripts": {
  "start": "node app.js",
  "dev":   "nodemon app.js"
}





Method: POST

URL: http://localhost:5000/api/auth/register

Headers:

Content-Type: application/json
Body (raw JSON):

{
  "username": "john",
  "email":    "john@example.com",
  "password": "password123"
}

B. Log In
Method: POST

URL: http://localhost:5000/api/auth/login

Headers:

Content-Type: application/json
Body (raw JSON):

{
  "email":    "john@example.com",
  "password": "password123"
}



C. Create a New Blog Post
Method: POST

URL: http://localhost:5000/api/blog/create

Headers:

Content-Type: application/json
Authorization: Bearer your_jwt_token_here
Body (raw JSON):


{
  "title":   "My First Blog Post",
  "content": "This is the content of my first blog post."
}


D. Get All Blog Posts
Method: GET

URL: http://localhost:5000/api/blog/

Headers: None required

Expected Response:

json
Copy code
[
  {
    "_id":      "blog_id",
    "title":    "My First Blog Post",
    "content":  "This is the content of my first blog post.",
    "author": {
      "_id":     "user_id",
      "username":"john"
    },
    "createdAt":"timestamp",
    "updatedAt":"timestamp",
    "__v":      0
  }
]
